// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.33.0
// source: stock.proto

package stockpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockQuoteServiceClient is the client API for StockQuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockQuoteServiceClient interface {
	GetStockQuotes(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (StockQuoteService_GetStockQuotesClient, error)
}

type stockQuoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockQuoteServiceClient(cc grpc.ClientConnInterface) StockQuoteServiceClient {
	return &stockQuoteServiceClient{cc}
}

func (c *stockQuoteServiceClient) GetStockQuotes(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (StockQuoteService_GetStockQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockQuoteService_ServiceDesc.Streams[0], "/stock.StockQuoteService/GetStockQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockQuoteServiceGetStockQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockQuoteService_GetStockQuotesClient interface {
	Recv() (*QuoteResponse, error)
	grpc.ClientStream
}

type stockQuoteServiceGetStockQuotesClient struct {
	grpc.ClientStream
}

func (x *stockQuoteServiceGetStockQuotesClient) Recv() (*QuoteResponse, error) {
	m := new(QuoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockQuoteServiceServer is the server API for StockQuoteService service.
// All implementations must embed UnimplementedStockQuoteServiceServer
// for forward compatibility
type StockQuoteServiceServer interface {
	GetStockQuotes(*QuoteRequest, StockQuoteService_GetStockQuotesServer) error
	mustEmbedUnimplementedStockQuoteServiceServer()
}

// UnimplementedStockQuoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockQuoteServiceServer struct {
}

func (UnimplementedStockQuoteServiceServer) GetStockQuotes(*QuoteRequest, StockQuoteService_GetStockQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStockQuotes not implemented")
}
func (UnimplementedStockQuoteServiceServer) mustEmbedUnimplementedStockQuoteServiceServer() {}

// UnsafeStockQuoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockQuoteServiceServer will
// result in compilation errors.
type UnsafeStockQuoteServiceServer interface {
	mustEmbedUnimplementedStockQuoteServiceServer()
}

func RegisterStockQuoteServiceServer(s grpc.ServiceRegistrar, srv StockQuoteServiceServer) {
	s.RegisterService(&StockQuoteService_ServiceDesc, srv)
}

func _StockQuoteService_GetStockQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockQuoteServiceServer).GetStockQuotes(m, &stockQuoteServiceGetStockQuotesServer{stream})
}

type StockQuoteService_GetStockQuotesServer interface {
	Send(*QuoteResponse) error
	grpc.ServerStream
}

type stockQuoteServiceGetStockQuotesServer struct {
	grpc.ServerStream
}

func (x *stockQuoteServiceGetStockQuotesServer) Send(m *QuoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StockQuoteService_ServiceDesc is the grpc.ServiceDesc for StockQuoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockQuoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock.StockQuoteService",
	HandlerType: (*StockQuoteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStockQuotes",
			Handler:       _StockQuoteService_GetStockQuotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stock.proto",
}
